/// Base class for all all client-side errors that can be generated by the app
sealed class AppException implements Exception {
  AppException(this.code, this.message);
  final String code;
  final String message;

  @override
  String toString() => message;
}

// /// Auth
// class EmailAlreadyInUseException extends AppException {
//   EmailAlreadyInUseException()
//       : super('email-already-in-use', 'Email already in use'.hardcoded);
// }

// class WeakPasswordException extends AppException {
//   WeakPasswordException()
//       : super('weak-password', 'Password is too weak'.hardcoded);
// }

// class WrongPasswordException extends AppException {
//   WrongPasswordException()
//       : super('wrong-password', 'Wrong password'.hardcoded);
// }

class RegistrationException extends AppException {
  RegistrationException(String message) : super('registration-failed', message);
}

class LoginException extends AppException {
  LoginException(String message) : super('login-failed', message);
}

// class CodeNotSentException extends AppException {
//   CodeNotSentException()
//       : super('code-not-sent', 'Something went wrong. Please try again later');
// }
//
// class ResetPasswordException extends AppException {
//   ResetPasswordException()
//       : super('password-not-reset',
//             'Password was not reset. Please try again later'.hardcoded);
// }
//
// class UserNotFoundException extends AppException {
//   UserNotFoundException() : super('user-not-found', 'User not found'.hardcoded);
// }
//
// class UserNotAuthenticated extends AppException {
//   UserNotAuthenticated()
//       : super('user-not-authenticated',
//             'You are not authenticated, please log in'.hardcoded);
// }
//
// /// Select Location
//
// class LocationPermissionDeniedException extends AppException {
//   LocationPermissionDeniedException()
//       : super('location-permission-denied',
//             'Location permission is required. Please grant it.'.hardcoded);
// }
//
// class NoInternetException extends AppException {
//   NoInternetException()
//       : super(
//             'no-internet', 'It looks like you are currently offline'.hardcoded);
// }
//
// class FavouriteFetchFailed extends AppException {
//   FavouriteFetchFailed()
//       : super('favourite-fetch-failed',
//             'Something went wrong, failed to fetch the favrourites'.hardcoded);
// }
//
// class DayTimeSelectionException extends AppException {
//   DayTimeSelectionException()
//       : super('daytime-selection-failed',
//             'From daytime cannot be less than untill daytime'.hardcoded);
// }

// /// Cart
// class CartSyncFailedException extends AppException {
//   CartSyncFailedException()
//       : super('cart-sync-failed',
//             'An error has occurred while updating the shopping cart'.hardcoded);
// }

// /// Checkout
// class PaymentFailureEmptyCartException extends AppException {
//   PaymentFailureEmptyCartException()
//       : super('payment-failure-empty-cart',
//             'Can\'t place an order if the cart is empty'.hardcoded);
// }

/// Orders
class ParseOrderFailureException extends AppException {
  ParseOrderFailureException(this.status)
      : super('parse-order-failure', 'Could not parse order status: $status');
  final String status;
}
